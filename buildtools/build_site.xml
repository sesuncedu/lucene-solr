<?xml version="1.0" encoding="UTF-8"?>
<project name="solrmarc instance" default="build" basedir="." >

    <property file="build.properties" />
    <property name="dist.dir" value="dist" />
    <property name="dist.path" location="${dist.dir}" />
    <property name="dist.exe.dir" value="bin" />
    <property name="dist.exe.path" location="${dist.path}/${dist.exe.dir}" />
    <property name="solrmarc.core.one-jar.name" value="SolrMarc.jar" /> 
    <property name="jetty.install.dir" value="${dist.path}/jetty" />
    <property name="solr.install.dir" value="${dist.path}/jetty/solr" />
    <property name="buildtools.path" location="buildtools" />

    <!-- import ant extras macros (skips import if file already included) -->
    <condition property="import.path" value="${buildtools.path}" else="doesnt_exist" >
        <not><typefound name="if" /></not>
    </condition>           
    <property name="ant_extras.dist.dir" location="${buildtools.path}" />
    <import file="${import.path}/ant_extras.xml" optional="true" />

    <!-- import ant_package.xml which defines all of the macros used for running the tests especially the smoke test -->
    <import file="${buildtools.path}/ant_jetty_test.xml" />

    <target name="clean" description="clean the generated directories" >
        <init_site_properties />
        <delete dir="${site.build.dir}" quiet="true" />
        <delete dir="${site.test.build.dir}" quiet="true" /> 
        <delete dir="${site.test.solr.dir}/data" quiet="true" />
        <delete dir="${dist.path}" quiet="true" />
    </target>

    <target name="init" unless="init.already.run"  
            description="create (empty) generated directories and define a bunch of needed properties" >
        <init_site_properties />
        <get_custom_indexer_class />
        <check_solr_test_up_to_date />
        <property name="init.already.run" value="true" />
    </target>

    <target name="compile" depends="init" unless="compile.already.run"
            description="Compile custom source code into the build directory"
            if="custom.index.source.exists">
        
        <get_jars_from_solrmarc_onejar todir="${site.lib.dir}/tmp_solrmarc_jars" />
        <path id="classpath.jars" description="Jars for classpath for building custom code (but not solr jars)">
            <fileset dir="${site.lib.dir}/tmp_solrmarc_jars">
                <include name="*.jar" />
            </fileset>
            <fileset dir="${site.lib.dir}" >
                <include name="*.jar" />
            </fileset>
        </path>

        <mkdir dir="${site.build.dir}" />

        <javac destdir="${site.build.dir}" srcdir="${site.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8">
            <include name="**/*.java" />
            <exclude name="**/z3950/*.java" />
            <classpath refid="classpath.jars" />
        </javac>
        <delete dir="${site.lib.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" /> 
        <property name="compile.already.run" value="true" />
    </target>

    <target name="build" depends="compile" unless="build.already.run"
            description="Build custom jar file containing custom code and log4j.properties" >
        <mkdir dir="${site.build.dir}/tmp_extra" />
        <copy todir="${site.build.dir}/tmp_extra" >
            <flattenmapper/>
            <fileset dir="${basedir}" includes="extra_data/**" />
        </copy>

        <resources id="customjarfiles" >
            <fileset dir="${site.build.dir}" includes="**/*.class" />
            <fileset dir="${basedir}" includes="log4j.properties" />
            <fileset dir="${site.build.dir}/tmp_extra" includes="**" />
        </resources>

        <if>
            <resourcecount refid="customjarfiles" count="0" when="gt" />
            <then>
                <jar destfile="${site.build.dir}/${custom.jar.name}.jar">
                    <fileset dir="${site.build.dir}" includes="**/*.class" />
                    <fileset dir="${basedir}" includes="log4j.properties" />
                    <fileset dir="${site.build.dir}/tmp_extra" includes="**" />
                </jar>
            </then>
        </if>

        <delete dir="${site.build.dir}/tmp_extra" />
        <property name="build.already.run" value="true" />
    </target>

    <target name="dist" depends="build" unless="dist.already.run"
             description="Copy necessary files to the dist directory, to make a runnable instance of SolrMarc">         
        <mkdir dir="${dist.path}" />
        <copy todir="${dist.path}" >
            <fileset dir="${site.base.dir}" includes="${trans.map.dir}/**,${scripts.dir}/**" />
        </copy>
        <copy_solrmarc_set_default_config config="${default.config}" todir="${dist.path}" />
        <copy todir="${dist.path}" >
            <flattenmapper/>
            <fileset dir="${site.build.dir}" includes="*.jar" />
            <fileset dir="${site.base.dir}" includes="*_index.properties" />
        </copy>
        <if >
            <available file="${site.build.dir}/${custom.jar.name}.jar" />
            <then>
                <property name="custom.jar.name.jar" value="${custom.jar.name}.jar" />
            </then>
            <else>
                <property name="custom.jar.name.jar" value="" />
            </else>
        </if>
        <copy todir="${dist.path}" overwrite="true" >
            <fileset dir="${site.base.dir}" includes="*_config.properties" />
            <filterchain>
                  <expandproperties />
                  <fixcrlf />
            </filterchain>     
        </copy>

        <copy_scripts />
        <copy_jetty />
        <copy_solr />
        <property name="dist.already.run" value="true" />
    </target>

    <!-- Site Testing Targets -->

    <target name="testClean" depends="init" description="clean generated test directories">
        <delete dir="${site.test.build.dir}" />
    </target>

    <target name="testInit" depends="testClean" 
            description="create (empty) generated test directories">
        <mkdir dir="${site.test.build.dir}" />
        <property name="site.test.jar" value="${custom.jar.name}Test.jar" />
        <property name="test.solr.dir" value="${site.test.solr.dir}" />
        <property name="test.data.dir" value="${site.test.data.dir}" />

        <if>
            <available file="${site.test.src.dir}" type="dir" />
            <then>
                <condition property="test.has.source">
                    <resourcecount count="0" when="gt" >
                        <fileset dir="${site.test.src.dir}" includes="**/*.java">
                        </fileset>
                    </resourcecount>
                </condition>
            </then>
        </if>

        <if>
            <available type="file" file="${test.solr.dir}/solr.xml" />
            <then>
                 <loadproperties srcfile="${site.base.dir}/${default.config}" >
                    <filterchain>
                        <tokenfilter>
                            <containsregex pattern="solr.core.name" />
                        </tokenfilter>
                    </filterchain>
                </loadproperties>
                <property name="solr.is.multicore" value="true" />
            </then>
            <else>  <!-- normal single core configuration -->
                <property name="solr.core.name" value="" />
                <property name="solr.is.multicore" value="false" />
            </else>
        </if>
        <echo message="solr.core.name = ${solr.core.name} " />
        <echo message="solr.is.multicore = ${solr.is.multicore} " />
    </target>

    <target name="testCompile" depends="testInit,compile" if="test.has.source" description="Compile test source code into test build dir"> 
        <get_jars_from_solrmarc_onejar junit="test/*.jar" todir="${site.test.dir}/tmp_solrmarc_jars" />
        <path id="test.compile.classpath.jars" description="Jars for classpath for building/running Test code">
            <fileset dir="${site.lib.dir}" includes="*.jar" excludes="SolrMarc.jar" />
            <fileset file="${site.build.dir}/${custom.jar.name}.jar" />
            <fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
        </path>

        <javac destdir="${site.test.build.dir}" 
               srcdir="${site.test.dir}/${src.dir}" 
               target="${java.compat.version}" source="${java.compat.version}" 
               debug="on" encoding="utf-8">
            <include name="**/*.java" />
            <classpath>
                <path refid="test.compile.classpath.jars" />
            </classpath>
        </javac>
        <delete dir="${site.build.dir}/tmp_extra" />
        <delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" />
    </target>

    <target name="testJar" depends="build,testCompile" if="test.has.source" description="jar up test class files">
         <echo message=" creating test jar :  ${site.test.build.dir}/${site.test.jar}" />
        <jar destfile="${site.test.build.dir}/${site.test.jar}" >
              <fileset dir="${site.test.build.dir}" includes="**/*.class" /> 
        </jar>
    </target>
    
    <target name="test" depends="smoketest,indextest,junittest" description="run the three types of tests" >
    </target>
    
    <target name="smoketest" depends="dist,testInit" description="start jetty pointing at test solr, index file, then look for it.">
        <if>
            <equals arg1="${solr.is.multicore}" arg2="false" />
            <then>
                <property name="smoketest.solr.data.dir" value="${site.test.solr.dir}/data" />
            </then>
            <else>
                <property name="smoketest.solr.data.dir" value="" />
            </else>
        </if>
        <property name="jetty.test.port" value="8983" />

        <!-- start a jetty server at the port defined by property  jetty.test.port  -->
        <echo level="warning" message="Starting Jetty for testing at URL:  http://localhost:${jetty.test.port} ..." />
        <jetty-start jettyloc="${jetty.install.dir}" solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" port="${jetty.test.port}" solrcore="${solr.core.name}" />

        <!-- check whether index in jetty server contains more than a certain number of records -->
        <!-- this is done because the next step deletes ALL of the records there, and we don't want -->
        <!-- delete your production index by mistake. -->
        <property name="maximum.expected.recs.in.test.solr" value="20" />
        <check-record-present port="${jetty.test.port}" solrcore="${solr.core.name}" numfoundprop="smoketest.initial.num.found" expectmaxcount="${maximum.expected.recs.in.test.solr}" />

        <!-- Now delete all of the records in the test solr index -->
        <echo level="warning" message="Deleting all records from test jetty via URL:  http://localhost:${jetty.test.port}/solr/update " />
        <jetty-delete-all returnproperty="test.smoke.delete.all" port="${jetty.test.port}" solrcore="${solr.core.name}" />
        <echo message="${test.smoke.delete.all}" />

        <!-- Index a sample file containing a single record -->
        <property name="smoketest.index.run.1.marcfile" location="${site.test.dir}/data/u399.mrc" />
        <echo level="warning" message="Indexing file: ${smoketest.index.run.1.marcfile}" /> 
        <indexfile solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" marcfile="${smoketest.index.run.1.marcfile}" port="${jetty.test.port}" solrcore="${solr.core.name}" returnproperty="smoketest.index.run.1" />   
        <echo level="warning" message="${smoketest.index.run.1}" /> 

        <!-- Index a sample file containing about a dozen records -->
        <property name="smoketest.index.run.2.marcfile" location="${site.test.dir}/data/selectedRecs.mrc" />
        <echo level="warning" message="Indexing file: ${smoketest.index.run.2.marcfile}" /> 
        <indexfile solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" marcfile="${smoketest.index.run.2.marcfile}" port="${jetty.test.port}" solrcore="${solr.core.name}" returnproperty="smoketest.index.run.2" />   
        <echo level="warning" message="${smoketest.index.run.2}" /> 

        <!-- Check number of records in index after the to sample index files are added -->
        <check-record-present port="${jetty.test.port}" solrcore="${solr.core.name}" recordlistprop="smoketest.record.list" numfoundprop="smoketest.num.found" />
        <echo level="warning" message="num found: ${smoketest.num.found} :  ${smoketest.record.list}" /> 
        <jetty-stop port="${jetty.test.port}" /> 

        <!-- Fail and exit if the wrong number of documents was found-->
        <property name="smoketest.expected.num" value="12" />
        <fail message="Expected to find ${smoketest.expected.num} documents in index instead found ${smoketest.num.found}" >
            <condition>
                <not><equals arg1="${smoketest.num.found}" arg2="${smoketest.expected.num}" /></not>
            </condition>
        </fail>
        <echo level="warning" message="Smoketest Successful!" />
    </target>

    <target name="indextest" depends="dist,testJar" description="run index acceptance test">
        <echo message="solr.path: ${solr.path}" />
        <echo message="solr.path being used for testing: ${site.test.solr.dir}" />
        <property name="solr.jar.file.dir" value="${site.test.dir}/tmp_solr_war_jars" />
        <get_jars_from_solr_war src="${jetty.install.dir}/webapps/solr.war" todir="${solr.jar.file.dir}" />
        <get_jars_from_solrmarc_onejar junit="test/*.jar"  todir="${site.test.dir}/tmp_solrmarc_jars" />

        <path id="test.run.classpath.jars">
            <fileset file="${site.build.dir}/${custom.jar.name}.jar" />
            <fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
            <fileset file="${site.test.build.dir}/${site.test.jar}" />
            <fileset dir="${solr.jar.file.dir}" includes="*.jar" />
        </path>
 
        <property name="indextest.class" value="org.solrmarc.index.ParameterizedIndexTest" />
        <property name="indextest.data.file" value="indextest.txt" /> 
        <echo message="indextest class = ${indextest.class} " />
        <echo message="solr.data.dir = ${site.test.solr.dir}/data " />
      
        <if >
            <and> 
                <isset property="indextest.class" />
                <available classname="${indextest.class}" classpathref="test.run.classpath.jars" />
            </and>
            <then>
                <if>
                    <available filepath="${test.data.dir}" file="${indextest.data.file}" type="file" />
                    <then>
                        <junit showoutput="yes" printsummary="yes" dir="${dist.path}" fork="yes" forkmode="once" >
                            <formatter type="xml" usefile="yes" />
                
                            <classpath>
                                <path refid="test.run.classpath.jars" />
                            </classpath>
                
                            <sysproperty key="test.data.path" path="${test.data.dir}" />
                            <sysproperty key="test.data.file" value="${indextest.data.file}" />
                            <sysproperty key="solr.path" path="${site.test.solr.dir}" />
                            <sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />
                            <sysproperty key="test.solr.verbose" value="${test.solr.verbose}" />
                            <test name="${indextest.class}" />
                        </junit>
                    </then>
                    <else>
                        <echo message="test data file ${indextest.data.file} not available" />
                    </else>
                </if>
            </then>
            <else>
                <echo message="test class ${indextest.class} not defined or not available" />
            </else>
        </if> 
        <!--  Now delete the jar files that had to be un-jarred from the solr.war file for the test to run -->
        <delete dir="${solr.jar.file.dir}" deleteonexit="true" quiet="true" />
        <delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" />
    </target>
    
    <target name="junittest" depends="dist,testJar" description="run junit tests for bib index">
        <echo message="solr.path: ${solr.path}" />
        <echo message="solr.path being used for testing: ${site.test.solr.dir}" />
        <property name="solr.jar.file.dir" value="${site.test.dir}/tmp_solr_war_jars" />
        <get_jars_from_solr_war src="${jetty.install.dir}/webapps/solr.war" todir="${solr.jar.file.dir}" />
        <get_jars_from_solrmarc_onejar junit="test/*.jar"  todir="${site.test.dir}/tmp_solrmarc_jars" />

        <path id="test.run.classpath.jars">
            <fileset file="${site.build.dir}/${custom.jar.name}.jar" />
            <fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
            <fileset file="${site.test.build.dir}/${site.test.jar}" />
            <fileset dir="${solr.jar.file.dir}" includes="*.jar" />
        </path>
        
        <!-- if no junit test class is defined, call the Util Unit test, which merely test some of the 
             utility classes used by SolrMarc. -->
        <property name="test.class"  value="org.solrmarc.index.UtilUnitTests" />
        
        <echo message="test class = ${test.class} " />
        <echo message="solr.data.dir = ${site.test.solr.dir}/data " />
      
        <if >
            <and> 
                <isset property="test.class" />
                <available classname="${test.class}" classpathref="test.run.classpath.jars" />
            </and>
            <then>
                <junit showoutput="yes" printsummary="yes" fork="yes" forkmode="once" dir="${dist.path}">
                    <formatter type="xml" usefile="yes" />
        
                    <classpath>
                        <path refid="test.run.classpath.jars" />
                    </classpath>
        
                    <sysproperty key="test.data.path" path="${test.data.dir}" />
                    <sysproperty key="test.data.file" value="${test.data.file}" />
                    <sysproperty key="test.config.dir" path="${dist.path}" />
                    <sysproperty key="test.config.file" value="${default.config}" />
                    <sysproperty key="solr.path" path="${site.test.solr.dir}" />
                    <sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />
                    <sysproperty key="test.solr.verbose" value="${test.solr.verbose}" />
                    <test name="${test.class}" />
                </junit>
            </then>
            <else>
                <echo message="test class ${test.class} not defined or not available" />
            </else>
        </if> 
        <!--  Now delete the jar files that had to be un-jarred from the solr.war file for the test to run -->
        <delete dir="${solr.jar.file.dir}" deleteonexit="true" quiet="true" />
        <delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" />
    </target>

    <!-- macros to handle the bulk of the work for the targets defined above   --> 

    <macrodef name="init_site_properties" description="define properties for various directories">
        <sequential>
            <property name="site.base.dir" location="${basedir}" />
            <property file="${site.base.dir}/build_override.properties" />
            
            <property name="site.src.dir" location="${site.base.dir}/${src.dir}" />
            <property name="site.lib.dir" location="${site.base.dir}/${lib.dir}" />
            <property name="site.build.dir" location="${site.base.dir}/${build.dir}" />
            <property name="site.test.dir" location="${site.base.dir}/${test.dir}" />
            <property name="site.test.src.dir" location="${site.test.dir}/${src.dir}" />
            <property name="site.test.build.dir" location="${site.test.dir}/${build.dir}" />
            <property name="site.test.data.dir" location="${site.test.dir}/data" />
            <property name="site.test.solr.dir" location="${site.test.dir}/solr" />
            <property name="site.map.dir" location="${site.base.dir}/${trans.map.path}" />
            <property name="site.script.template.dir" location="${site.base.dir}/${script.template.dir}" />
            <property name="site.scripts.dir" location="${site.base.dir}/${scripts.dir}" />
            <property name="site.solrconf.dir" location="${site.base.dir}/solrConf" />
        </sequential>
    </macrodef>
    
    <!-- macro to copy SolrMarc.jar from lib directory to dist directory and set the default config to use at the same time -->
    <macrodef name="copy_solrmarc_set_default_config" >
        <attribute name="config" />
        <attribute name="todir" />
        <sequential>
            <java jar="${site.lib.dir}/${solrmarc.core.one-jar.name}" fork="true" >
                <jvmarg value="-Dsolrmarc.main.class=org.solrmarc.tools.PropertyFileFetcher" />
                <arg value="JarUtils.jar" />
                <arg value="${site.build.dir}" />
            </java>
            <java classpath="${site.build.dir}/JarUtils.jar" classname="JarUpdate" fork="true" >
                <arg value="${site.lib.dir}/${solrmarc.core.one-jar.name}" />
                <arg value="META-INF/MANIFEST.MF" />
                <arg value="Default-Config-File: @{config}" />
                <arg value="@{todir}/${solrmarc.core.one-jar.name}" />
            </java>
            <delete file="${site.build.dir}/JarUtils.jar" />
        </sequential>
    </macrodef>

    <macrodef name="check_solr_test_up_to_date" description="Check whether the test/jetty/webapps/solr.war and test/solr/conf are up to date w.r.t. the solrConf directory" >
        <sequential>
            <if>  <!--  if it is a multicore-solr configuration -->
                <available type="file" file="${site.base.dir}/solrConf/solr.xml" />
                <then>
                    <!-- copy files from solrConf if they are newer. -->
                    <copy overwrite="true" todir="${site.test.solr.dir}" failonerror="false">
                        <fileset dir="${site.base.dir}/solrConf" includes="**" excludes="*.war" >
                            <depend targetdir="${site.test.solr.dir}" />
                        </fileset>
                    </copy>
                </then>
                <else>  <!-- normal single core configuration -->
                        <!-- copy files from solrConf if they are newer. -->
                    <copy overwrite="true" todir="${site.test.solr.dir}/conf" failonerror="false">
                        <fileset dir="${site.base.dir}/solrConf" includes="*" excludes="*.jar,*.war" >
                            <depend targetdir="${site.test.solr.dir}/conf" />
                        </fileset>
                    </copy>
                    <copy overwrite="true" todir="${site.test.solr.dir}/lib" failonerror="false">
                        <fileset dir="${site.base.dir}/solrConf" includes="*.jar" >
                            <depend targetdir="${site.test.solr.dir}/lib" />
                        </fileset>
                    </copy>
                </else>
            </if>
            <if>  
                 <available type="file" file="${site.dir}/solrConf/solr.war" />
                 <then>
                     <!-- copy war file from solrConf if it is newer. -->
                     <copy overwrite="true" todir="${site.test.dir}/jetty/webapps" failonerror="false">
                         <fileset dir="${site.base.dir}/solrConf" includes="*.war" >
                             <depend targetdir="${site.test.dir}/jetty/webapps" />
                         </fileset>
                     </copy>
                 </then>
            </if>
        </sequential>
    </macrodef>
    
    <macrodef name="copy_scripts" description="Copy scripts or batch files from script_templates directory to the dist directory">
        <sequential>
            <if>
                <or> 
                    <os family="windows" />
                    <equals arg1="${package-prebuilt.allscripts.batch}" arg2="true"/>
                </or>
                <then>
                    <mkdir dir="${dist.exe.path}" />
                    <copy todir="${dist.exe.path}" overwrite="true">
                        <fileset dir="${site.script.template.dir}" includes="*.bat" />
                        <filterchain>
                            <fixcrlf eol="dos"/>
                        </filterchain>
                        <filterset>
                            <filter token="DEFAULT_CONFIG_FILE" value="${default.config}" /> 
                            <filter token="MEM_ARGS" value="${exe.mem.args}" />
                        </filterset>
                    </copy>
                </then>
            </if>
            <if> 
                <or> 
                    <not> <os family="windows" /> </not>
                    <equals arg1="${package-prebuilt.allscripts.shell}" arg2="true"/>
                </or>
                <then>
                    <mkdir dir="${dist.exe.path}" />
                    <copy todir="${dist.exe.path}" overwrite="true">
                        <fileset dir="${site.script.template.dir}" includes="*" excludes="*.bat" />
                        <filterchain>
                            <fixcrlf eol="unix"/>
                        </filterchain>
                        <filterset>
                            <filter token="DEFAULT_CONFIG_FILE" value="${default.config}" />
                            <filter token="MEM_ARGS" value="${exe.mem.args}" />
                        </filterset>
                    </copy>
    
                    <chmod perm="u+x">
                        <fileset dir="${dist.exe.path}" excludes="*.jar,*.bat,*.properties,*.log" />
                    </chmod>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="copy_jetty"  description="Copy Jetty setup from site test config to distribution dir" >
        <sequential>
            <copy todir="${jetty.install.dir}" overwrite="false" >
                <fileset dir="${site.test.dir}/jetty" includes="**" />
            </copy>
        </sequential>
    </macrodef>
    
   <macrodef name="copy_solr"  description="Copy Solr from from site test config to distribution jetty dir" >
        <sequential>
            <copy todir="${solr.install.dir}" overwrite="false" >
                <fileset dir="${site.test.dir}/solr" includes="**" excludes="**/data/**,**/index" />
            </copy>
        </sequential>
    </macrodef>

    <!-- macro to determine the name of the class containing custom indexer source code -->
    <macrodef name="get_custom_indexer_class">
        <sequential>
            <if>
                <available file="${site.src.dir}" type="dir" />
                <then>
                    <fileset id="custom_indexer_source" dir="${site.src.dir}" includes="**/*.java">
                        <or>
                            <containsregexp expression="public[ ]+class[ ]+[A-Za-z][A-Za-z0-9_]*[ ]+extends[ ]+SolrIndexer" />
                            <containsregexp expression="public[ ]+class[ ]+[A-Za-z][A-Za-z0-9_]*[ ]+extends[ ]+org[.]solrmarc[.]index[.]SolrIndexer" />
                        </or>
                    </fileset>

                    <condition property="custom.index.source.exists">
                        <or>
                            <resourcecount count="0" when="gt" refid="custom_indexer_source" />
                            <isset property="solr.indexer" />
                        </or>
                    </condition>

                    <property name="custom.indexer.source" refid="custom_indexer_source" />
        
                    <if>
                        <isset property="solr.indexer" />
                        <then>
                            <property name="custom.indexer.class" value="${solr.indexer}" />
                        </then>
                        <elseif>
                            <resourcecount count="0" when="gt" refid="custom_indexer_source" />
                            <then>
                                <pathconvert property="custom.indexer.class" refid="custom_indexer_source">
                                    <chainedmapper>
                                        <regexpmapper from="^.*src[/\\](.*java)$$" to="\1" />
                                        <packagemapper from="*.java" to="*" />
                                    </chainedmapper>
                                </pathconvert>
                                <pathconvert property="custom.jar.name" refid="custom_indexer_source">
                                    <chainedmapper>
                                        <regexpmapper from="^.*src[/\\]([A-Za-z0-9_]*[/\\])*(.*)[.]java$$" to="\2" />
                                    </chainedmapper>
                                </pathconvert>
                            </then>
                        </elseif>
                        <else>
                            <property name="custom.indexer.class" value="org.solrmarc.index.SolrIndexer" />
                        </else>
                    </if>
                    <if>
                        <not><isset property="custom.jar.name" /></not>
                        <then>
                            <property name="custom.jar.name" value="Custom" />
                        </then>
                    </if>
                </then>
                <else>
                    <property name="custom.indexer.source" value="" />
                    <property name="custom.indexer.class" value="" />
                    <property name="custom.jar.name" value="Custom" />
                </else>
            </if>

            <echo message="custom.indexer.source = ${custom.indexer.source}" />
            <echo message="custom.indexer.class = ${custom.indexer.class}" />
            <echo message="custom.jar.name = ${custom.jar.name}" />
        </sequential>
    </macrodef>
    
    <!-- macro to unbundle all of the necessary jars from the SolrMarc One-Jar so they can be used by junit tests -->
    <macrodef name="get_jars_from_solrmarc_onejar" >
        <attribute name="junit" default="lib/*.jar" />
        <attribute name="todir" />
        <sequential>
            <mkdir dir="@{todir}" />
            <unwar src="${site.lib.dir}/SolrMarc.jar" dest="@{todir}" >
                <patternset>
                    <include name="main/*.jar"/>
                    <include name="lib/*.jar"/>
                    <include name="@{junit}"/>
                </patternset>
                <flattenmapper />
            </unwar>
        </sequential>
    </macrodef>

    <!-- macro to unbundle all of the necessary jars from the solr.war file so they can be used by junit tests -->
    <macrodef name="get_jars_from_solr_war" >
        <attribute name="src" default="${jetty.install.dir}/webapps/solr.war" />
        <attribute name="todir" />
        <sequential>
            <mkdir dir="@{todir}" />
            <unwar src="@{src}" dest="@{todir}">
                <flattenmapper/>
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </unwar>
        </sequential>
    </macrodef>

</project>
