id = 001, first

# this group of _text fields define title-like fields
# they are all used (with different boosting factors) when the user specifies "Search by title"
title_text = 245a:LNK245a
subtitle_text = 245b:LNK245b
title_added_entry_text = 700tfnp:710tfnp:711atfnp:740anp
series_title_text = 440anp:490a:800tfnp:830afnp:810tfnp:811tfnp
notes_text = 505a
uniform_title_text = 130adflnp:240aflnp
alternate_form_title_text = 246abfnp:780st:785st:773st:111tfnp
part_text = 245np

title_display = custom, removeTrailingPunct(245a)
title_facet = custom, getSortableTitle
# getSortableTitle - internally calls get title, which concatenates 245a and 245b fields, 
#                    then the routine strips off a number of initial characters based on the
#                    the values found in the Marc indicators.  Lastly the routine transforms the 
#                    title to all lower case. 
subtitle_display = custom, removeTrailingPunct(245b)
responsibility_statement_display = custom, removeTrailingPunct(245c)
linked_responsibility_statement_display = LNK245c
title_added_entry_display = custom, removeTrailingPunct(700t)
uniform_title_facet = custom, removeTrailingPunct(130adflnp:240aflnp)
linked_title_display = LNK245ab
alternate_form_title_facet = custom, removeTrailingPunct(246abinp)
part_display = custom, removeTrailingPunct(245np)
journal_title_facet = custom, getJournalTitleFacet
journal_title_text = custom, getJournalTitleText(245a:LNK245a)
journal_addnl_title_text = custom, getJournalTitleText(245b:LNK245b:245np:130adfnp:240afnp:246abfnp:700tfnp:710tfnp:711atfnp:740anp)


# this group of _text fields define author-like fields
# they are all used (with different boosting factors) when the user specifies "Search by title"
author_text = 100abcdeq4:110abcde4:111acdejnq4:LNK100abcdeq4:LNK110abcde4:LNK111acdejnq4
author_added_entry_text = 700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a

author_display = custom, removeTrailingPunct(100abcdeq4:110abcde4:111acdeq4)
linked_author_display = LNK100ab:LNK110a:LNK111a:LNK700a:LNK710a:LNK711a
author_facet = custom, removeTrailingPunct(100abcdeq4:110abcde4:111acdejnq4:700abcdeq4:710acdejq4:711acdejq4:800abcdeq4:810abcde4:811acdejq4:773a)
author_sort_facet = custom, getSortableAuthor

published_text = 260abc
published_display = custom, removeTrailingPunct(260abc)
published_date_display = custom, getPublicationDate
# getPublicationDate - retrieves characters 7 - 10 from 008 field, characters 11 - 14 from 008 field
#                      and the contents of the 260c field, and looks at all three values to try to determine
#                      the single best 4 digit year value to return as the "publication date" of the item.
published_date_facet = custom, getPubDateGroups(pub_date_range_map.properties)
# getPubDateGroups - starts with the four digit year value returned by getPublicationDate (see above)
#                    and uses that date to map to one or more descriptive strings such as: "This year",
#                    "Last 3 years", "Last 10 years", "Last 50 years", and "More than 50 years ago"
material_type_text = 300a
marc_display = FullRecordAsXML
marc_text = custom, getAllSearchableFieldsAsSet(100, 900)
# getAllSearchableFields - returns ALL fields and all associated subfields with a field tag greater or 
#                          equal to 100 and less than 900 
year_multisort_i = custom, getPublicationDate
# (see comment with published_date_display above)
isbn_text = 020a, (pattern_map.isbn_clean)
# pattern_map.isbn_clean - takes the contents of the 020a subfield, and returns the initial segment 
#                          of it consisting of digits, spaces and dashes.
issn_text = 022a, (pattern_map.isbn_clean)
isbn_display = 020a, (pattern_map.isbn_clean)
issn_display = 022a, (pattern_map.isbn_clean)
oclc_text = 035a, (pattern_map.oclc_num)
url_display = custom, getLabelledURLnew("")
# getLabelledURL - grabs all 856 u fields, if there is a z subfield use that as a label, otherwise use the default.

subject_text = 600[a-z]:610[a-z]:611[a-z]:630[a-z]:650[a-z]:651[a-z]:655[a-z]:690[a-z]:520ab
subject_facet = custom, getAllSubfields(600[a-z]:610[a-z]:611[a-z]:630[a-z]:650[a-z]:651[a-z]:655[a-z]:690[a-z], " -- ")

call_number_broad_facet = custom, getCallNumberPrefixNew(callnumber_map.properties, 1)
# getCallNumberPrefixNew - selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          and then uses the callnumber_map to map only the first letter of the LC call number
#                          to the broad LC subject description for that single letter.
call_number_facet = custom, getCallNumberPrefixNew(call_number_detail_map.properties, 0)
# getCallNumberPrefixNew - as above, selects a single 'best' LC callnumber from the 999a subfield and the 050ab subfields
#                          but then uses the a different, more detailed callnumber_map to map the first two letters of 
#                          the first letter of the LC call number to a more detailed LC subject description.  Additionally
#                          for a few two letter combinations, (E, F, GV, PN and Z) the number following the initial letters
#                          are used to further refine the LC subject description. 
#                          to the broad description for that single letter.
call_number_text = custom, getCallNumbersCleanedNew(false)
# getCallNumbersCleanedNew - gather all call numbers from 999a subfields and if none of them are LC numbers also grabs the
#                            value in the 050ab subfields.  This list is then simply returned and all of the call numbers are
#                            indexed for searching.
call_number_orig_display = custom, getCallNumbersCleanedNew(true)
call_number_display = custom, getCallNumbersCleanedNewNo050(true)
# getCallNumbersCleanedNew - gather all call numbers from 999a subfields and if none of them are LC numbers also grabs the
#                            value in the 050ab subfields.  This list is then sorted, and similar call numbers are grouped
#                            together, so that the two call numbers: CD05939 v.1  and CD05939 v.2  would produce a single output
#                            string of:  CD05939 v.1, v.2
#                            Note that the dev index uses a modified version of this routine that doesn't include call numbers
#                            from the 050 field.
call_number_sort_facet = custom, getCallNumberCleanedNew(sortable)
# getCallNumberCleanedNew - as above, selects a single 'best' callnumber from the 999a subfield and the 050ab subfields
#                           If this 'best' call number is a LC call number, it will be expanded with leading zeroes to make 
#                           sorting of the call numbers work better.

barcode_facet = 999i
series_title_facet = custom, removeTrailingPunct(440a:490a:800abcdqtfmnrp:810abcdftnp:811acdefnpt:830afmnrp)
date_indexed_facet = DateRecordIndexed
source_facet = "Library Catalog"
subject_era_facet = custom, removeTrailingPunct(650d:650y:651y:655y)
topic_form_genre_facet = custom, removeTrailingPunct(650a:650b:650x:655a)
region_orig_facet = custom, removeTrailingPunct(650z:651a)
region_facet = custom, getRegionFacet
format_facet = custom, getCombinedFormatNew2
format_orig_facet = custom, getCombinedFormat

library_orig_facet = 999m, library_map.properties
library_facet = custom, getCustomLibrary(shadowed_location_map.properties, library_map.properties)
language_facet = custom, getCustomLanguage(language_map.properties)
# getCustomLanguage - looks in characters 35 - 37 of field 008 for primary language. Also looks in 041a d h and b to list 
#                     languages that the item is "translated from" or "dubbed in" or "subtitled in" or "has summary in"
location_facet = custom, getCustomLocation(location_map_2.properties, shadowed_location_map.properties, library_map.properties)
location_orig_facet = custom, getCustomLocation(location_map.properties, shadowed_location_map.properties, library_map.properties)
location2_facet = custom, getCustomLocation(location_map_3.properties, shadowed_location_map.properties, library_map.properties)
instrument_raw_display = 048[a-z]
instrument_facet = 048a[0-1]:048b[0-1], instrument_map.properties
recording_type_facet = 000[6], (map.recording_type)
recordings_and_scores_facet = custom, getRecordingAndScore
# getRecordingAndScore - looks in character 6 of the leader.  If there is a 'c' or 'd' return both "Scores" and
#                        "Recordings and/or Scores". If there is a 'j' return both "Recordings" and
#                        "Recordings and/or Scores". 
recording_format_facet = custom, getRecordingFormat, format_maps.properties(recording_format)
# getRecordingFormat - looks in character 6 of the leader.  If there is a 'i' or 'j' or ir field 245h contains "videorecording"
#                      then grab all 999t subfields, map them via the map format_maps.properties(recording_format) and return them.
music_catagory_facet = 999a[0-1]:999a[0], music_maps.properties(music_catagory), first
ports_of_call_facet = 650c:650z:651a:651x:651z:655z, semester_at_sea.properties(port_of_call)
guide_book_facet = 651v, (pattern_map.guide_book)
composition_era_facet = custom, getEra, composition_era_map.properties
music_composition_era_facet = custom, getMusicEra
music_composition_form_text = custom, getMusicCompositionForm
music_composition_form_facet = custom, getMusicCompositionForm
genre_facet = 655a

# getEra - looks in the 045a subfield, and then maps the two character codes found there to the decade/century to which they refer.

#shadowed_location_facet = custom, getShadowedLocation(shadowed_location_map.properties(shadowed), returnHIDDEN, extraIds)
#shadowed_location_facet = customDeleteRecordIfFieldEmpty, getShadowedLocation(shadowed_location_map.properties, deleteHIDDEN, noExtraIds)
shadowed_location_facet = custom, getShadowedLocation(shadowed_location_map.properties, returnHIDDEN, extraIds)
# getShadowedLocation - looks at the 999 field in l and k subfields, matches the values there against the shadowed_location_map
#                       if all holdings for a particular item are mapped to HIDDEN then the record itself is hidden from view.
#                       Additionally this routine uses a static list from Chris Hobeke to determine when when particular items or
#                       holdings for a particular item are marked as "shadowed" within the Virgo system. (Which isn't noted anywhere
#                       within the Marc records themselves. 

summary_holdings_display = custom, getSummaryHoldingsInfo(library_map.properties, location_map_2.properties)

date_first_indexed_facet = custom, getDateFirstAdded("new_recs_dates_sorted.txt")

full_title_text=245ab:LNK245ab
author_prev_facet = custom, removeTrailingPunct(100abcdeq4:110abcde4:111acdejnq4)
medium_display = 245h, (pattern_map.medium), first
form_display = custom, removeTrailingPunct(245k)
date_coverage_display = 245f
date_bulk_coverage_display = 245g
title_sort_facet = custom, getSortableTitleCleaned
description_note_display = 520a
local_notes_display = 946a

release_date_facet = custom(org.solrmarc.index.VideoInfoMixin), getOriginalReleaseDate
video_run_time_display = custom(org.solrmarc.index.VideoInfoMixin), getVideoRunTime
video_rating_facet = custom(org.solrmarc.index.VideoInfoMixin), getVideoRating
video_target_audience_display = custom(org.solrmarc.index.VideoInfoMixin), getVideoTargetAudience
video_director_facet = custom(org.solrmarc.index.VideoInfoMixin), getVideoDirector
video_genre_facet = custom(org.solrmarc.index.VideoInfoMixin), getVideoGenre

pattern_map.form.pattern_0 = .*?(\\[|\\()([^]]*)(]|\\)).*=>$2
pattern_map.medium.pattern_0 = [Ss]ound[ ]+recording=>sound recording
pattern_map.medium.pattern_1 = [Vv]ideo[-]?recording=>videorecording
pattern_map.medium.pattern_2 = [Ee]lectronic book=>electronic book
pattern_map.medium.pattern_3 = [Ee]lectronic [a-z]*=>electronic resource
pattern_map.medium.pattern_4 = [Mm]icro(form|film|fiche)=>microform
pattern_map.medium.pattern_5 = [Mm]icrofiche=>microform
pattern_map.medium.pattern_6 = [Ss]lide=>slide
pattern_map.medium.pattern_7 = CD=>sound recording
pattern_map.medium.pattern_8 = DVD=>videorecording
pattern_map.medium.pattern_9 = [Cc]omputer[ ]*file=>computer file
pattern_map.medium.pattern_10 = [Mm]anuscript=>manuscript
pattern_map.medium.pattern_11 = [Pp]icture=>picture
pattern_map.medium.pattern_12 = \b[Gg]raphic\b=>graphic
pattern_map.medium.pattern_13 = [Mm]ap=>cartographic material
pattern_map.medium.pattern_13 = [Cc]artographic material=>cartographic material
pattern_map.medium.pattern_14 = [Ss]eries record=>series record
pattern_map.medium.pattern_15 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_16 = [Aa]rt reproduction=>art reproduction
pattern_map.medium.pattern_17 = [Aa]rt original=>art original
pattern_map.medium.pattern_18 = [Mm]otion picture=>motion picture
pattern_map.medium.pattern_19 = ^([Cc]hart|[Kk]it|[Bb]raille|[Rr]ealia|[Gg]ame|[Ee]quipment|[Ff]ilmstrip|[Ww]ebsite|[Tt]ransparency|[Mm]odel)$=>$1

map.recording_type.j = Musical
map.recording_type.i = Non-Musical

pattern_map.stripPunct.pattern_0 = ^(.*?[^ ]) *[,/;:= ]*$=>$1
pattern_map.stripPunct.pattern_1 = ^(.+((\\p{L}|\\p{N})\\p{M}?(\\p{L}|\\p{N})\\p{M}?))\\. *$=>$1
pattern_map.stripPunct.pattern_2 = ^\\[(.+)\\]$=>$1
pattern_map.stripPunct.pattern_3 = ^\\[([^]]+)?$=>$1
pattern_map.stripPunct.pattern_4 = ^([^\\[]+)\\]$=>$1
pattern_map.stripPunct.pattern_5 = ^(.+)$=>$1


pattern_map.guide_book.pattern_0 = Guidebook=>Guidebook

pattern_map.oclc_num.pattern_0 = .*\\(OCoLC\\)(.*)=>$1

pattern_map.call_num.pattern_0 = ([A-Za-z]*).*=>$1
pattern_map.call_num1.pattern_0 = ([^|]*)\\|.*=>$1
pattern_map.call_num2.pattern_0 = [^|]*\\|(.*)=>$1

pattern_map.isbn_clean.pattern_0 = ([- 0-9]*[0-9]).*=>$1