<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="build" name="SolrMarc Custom">

    <!-- property files -->
    <property file="build_override.properties" />
    <property file="build.properties" />

    <property name="buildtools.path" value="buildtools" />
        
    <!-- import other ant scripts -->
    <property name="one-jar.dist.dir" value="${buildtools.path}" />
    <import file="${buildtools.path}/one-jar-ant-task.xml"/>
    
    <tstamp>
        <format property="year" pattern="yyyy" />
        <format property="DSTAMP" pattern="yyyy-MM-dd" />
        <format property="TSTAMP" pattern="HH:mm:ss" />
        <format property="dateversion" pattern="yyyy.MM.dd.HH.mm.ss" />
    </tstamp>
 
    <path id="classpath.jars" description="Jars for classpath for building custom code (but not solr jars)">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
            <exclude name="junit*.jar" />
        </fileset>
        <fileset dir="${lib.dir}/solrmarc/dist" includes="*.jar" />
        <fileset dir="${site.dir}/lib" includes="*.jar" />
    </path>

    <target name="clean" description="clean the generated directories">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${tag.dir}" />
        <delete dir="${tag.dir}" />
    </target>

    <target name="init" depends="init_site,init_site_finish" description="create (empty) generated directories">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${dist.dir}" />
    </target>

    <target name="dependencies" depends="solrversion"  description="Build the core SolrMarc code" >
        <ant dir="${lib.dir}/solrmarc" target="build" inheritAll="false"/>
    </target>

    <target name="init_site" description="Create the src, lib, bin, test directories for a custom site"
            unless="site.dir">
        <input message="Enter name of directory to contain all site-specific modifications:"       
            addproperty="site.dir" />
        <propertyfile file="build_override.properties">
            <entry key="site.dir" value="${site.dir}" />
        </propertyfile>
        <input message="Enter name to use for Jar File containing custom indexing functions, libraries, and properties${line.separator}(Note: omit &quot;.jar&quot; from end of Jar Name) "
            addproperty="custom.jar.name" defaultvalue="Custom"/>
        <input message="Enter prefix of properties files for config and index for custom modifications ${line.separator}(ie. for  myprefix_config.properties  and   myprefix_index.properties  enter  myprefix)"       
            addproperty="custom.config.file.prefix" defaultvalue="${custom.jar.name}" />
        <input message="Enter name to use for final resulting Jar File containing all code, libraries, and properties${line.separator}(Note: omit &quot;.jar&quot; from end of Jar Name) "
            addproperty="distribution.jar.name" defaultvalue="${custom.jar.name}_SolrMarc"/>
        <input message="Enter java heap size memory argument to put in generated scripts for running site-specific SolrMarc Indexer "
            addproperty="exe.mem.args" defaultvalue="-Xmx256m"/>
        <mkdir dir="${site.dir}" />
        <propertyfile file="${site.dir}/build.properties">
            <entry key="custom.config.file.prefix" value="${custom.config.file.prefix}" />
            <entry key="distribution.jar.name" value="${distribution.jar.name}" />
            <entry key="custom.jar.name" value="${custom.jar.name}" />
        </propertyfile>
    </target>
    
    <target name="init_site_finish" if="site.dir" >
        <property file="${site.dir}/build.properties" />
         
        <property name="site.src.dir" value="${site.dir}/${src.dir}" />
        <property name="site.lib.dir" value="${site.dir}/${lib.dir}" />
        <property name="site.build.dir" value="${site.dir}/${build.dir}" />
        <property name="site.test.dir" value="${site.dir}/${test.dir}" />
        <property name="site.map.dir" value="${site.dir}/${trans.map.path}" />
        <property name="site.script.dir" value="${site.dir}/${script.template.dir}" />
        <mkdir dir="${site.src.dir}" />
        <mkdir dir="${site.build.dir}" />
        <mkdir dir="${site.lib.dir}" />
        <mkdir dir="${site.test.dir}" />
        <mkdir dir="${site.map.dir}" /> 
        <mkdir dir="${site.script.dir}" /> 
         
        <!-- Now set some defaults for properties if they are not defined yet -->
        <property name="custom.jar.name" value="Custom" />
        <property name="distribution.jar.name" value="SolrMarc" />
        <property name="custom.config.file.prefix" value="" />
        <property name="exe.mem.args" value="-Xmx256m" />
         
        <echo message="custom.jar.name = ${custom.jar.name}" />
    </target>
    
    <!-- Solr Version Properties Targets -->
    <target name="solrversion" unless="${solr.version}" description="Set the version of Solr to use" >
        <input message="solr.version must be defined as either 1.2, 1.3, or 1.4 (or war)" 
            validargs="1.2,1.3,1.4,war" 
            addproperty="solr.version" defaultvalue="1.3" />
        <propertyfile file="${site.dir}/build.properties">
            <entry key="solr.version" value="${solr.version}" />
        </propertyfile>
    </target>

    <target name="solrversioncheck"  description="Check whether a solr.war file needs to be unbundled to get the Solr jars" >
        <condition property="solr.version.war">
            <equals arg1="${solr.version}" arg2="war" />
        </condition>
    </target>

    <target name="solrwarlocation" depends="solrversioncheck" if="solr.version.war" unless="solr.war.location"
                description="Set the location of the solr.war file to unbundle to extract the Solr jars" >
        <input message="Enter full path of where solr.war file is located:" addproperty="solr.war.location" />
        <condition property="war.exists">
            <available file="${solr.war.location}" />
        </condition>
        <fail unless="war.exists">Solr.war file ${solr.war.location} does not exist</fail>
        <propertyfile file="build_override.properties">
            <entry key="solr.war.location" value="${solr.war.location}" />
        </propertyfile>
    </target>

    <target name="solrlibextract" depends="solrversion,solrwarlocation" if="solr.version.war"
                description="Unbundle Solr jars from the solr.war file used by the Solr server"> 
        <mkdir dir="${lib.dir}/solr_war" />
        <unwar src="${solr.war.location}" dest="${lib.dir}/solr_war" overwrite="true">
            <patternset>
                <include name="**/lucene-*.jar" />
                <include name="**/apache-solr-*.jar" />
                <include name="**/slf4j*.jar" />
            </patternset>
            <mapper type="flatten" />
        </unwar>
    </target>

    <target name="compile" depends="init,dependencies,solrlibextract" 
            description="Compile custom source code into the build directory"
            if="site.dir">
        <javac destdir="${site.build.dir}" srcdir="${site.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8">
            <include name="**/*.java" />
            <classpath refid="classpath.jars" />
        </javac>

        <jar destfile="${site.build.dir}/${custom.jar.name}.jar">
            <fileset dir="${site.build.dir}" includes="**/*.class" />
        </jar>
    </target>


    <target name="defaultconfigcnt" unless="default.config" >
        <condition property="only.one.config" >
            <resourcecount when="equal" count="1" >
                <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*_config.properties" />
            </resourcecount>
        </condition>
        <condition property="zero.configs" >
            <resourcecount when="equal" count="0" >
                <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*_config.properties" />
            </resourcecount>
        </condition>
        <condition property="several.configs" >
            <resourcecount when="greater" count="1" >
                <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*_config.properties" />
            </resourcecount>
        </condition>
        <pathconvert property="config.file.list" pathsep=",">
            <path >
                <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*_config.properties" />
            </path>
            <flattenmapper />
        </pathconvert>
    </target>
    
    <target name="defaultconfig0" if="zero.configs" unless="default.config">
        <property name="default.config" value="" />
    </target>
    
    <target name="defaultconfig1" if="only.one.config" unless="default.config">
        <property name="default.config" value="${config.file.list}" />
    </target>
    
    <target name="defaultconfiginput" if="several.configs" unless="default.config">
        <input message="Select the default config file to use if no such file is specified on the command line" 
            validargs="${config.file.list}" 
            addproperty="default.config" />
    </target>

    <target name="defaultconfig" depends="defaultconfigcnt,defaultconfig0, defaultconfig1, defaultconfiginput" >
        <propertyfile file="${site.dir}/build.properties">
            <entry key="default.config" value="${default.config}" />
        </propertyfile>
    </target>
    
    <target name="build" depends="compile,defaultconfig" description="create ${jar.name} in the build directory">
        <copy tofile="${buildtools.path}/manifest.mf" 
              file="${buildtools.path}/manifest_template.mf" overwrite="true">
            <filterset>
                <filter token="NAMEOFMAINCLASS" value="org.solrmarc.marc.MarcImporter"/>
                <filter token="NAMEOFDEFAULTCONFIGFILE" value="${default.config}" />
            </filterset>
        </copy>
        
        <!-- Load in name of main jar file from solrmarc dist build.properties -->
        <loadproperties srcfile="${lib.dir}/solrmarc/build.properties">
            <filterchain>
                <linecontains>
                    <contains value="jar.name"/>
                </linecontains>
            </filterchain>
        </loadproperties>
        
        <one-jar destfile="${dist.dir}/${distribution.jar.name}.jar" 
               manifest="${buildtools.path}/manifest.mf">
            <main jar="${lib.dir}/solrmarc/${dist.dir}/${jar.name}" />
            <lib>
                <fileset dir="${lib.dir}" includes="*.jar" excludes="junit*.jar,jzkit_client.jar"/>
                <fileset dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />
                <fileset dir="${site.build.dir}" includes="*.jar" />
                <fileset dir="${site.lib.dir}" includes="*.jar" />
            </lib>
            <fileset dir="${lib.dir}/solrmarc/${trans.map.path}" includes="*.properties" />
            <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*.properties" excludes="build.properties"/>
            <fileset dir="." includes="log4j.properties" />
            <fileset dir="${site.map.dir}" includes="*.properties" />
        </one-jar>
        
        <copy todir="${dist.dir}" overwrite="true">
            <fileset dir="${script.template.dir}" includes="*" />
            <fileset dir="${site.script.dir}" includes="*" />
            <filterchain>
                <fixcrlf />
            </filterchain>
            <filterset>
                <filter token="CUSTOM_JAR_NAME" value="${distribution.jar.name}.jar" />
                <filter token="MEM_ARGS" value="${exe.mem.args}" />
            </filterset>
        </copy>
        
        <chmod perm="u+x" >
            <fileset dir="${dist.dir}" excludes="*.jar" />
        </chmod>

    </target>

    
    <target name="usage" description="Prints usage instructions">
        <echo message="Welcome to the Solrmarc indexing project" />
        <echo message="Use 'ant' to build the latest code" />
        <echo message="Use 'ant -Dsolr.version=&quot;1.2&quot;' to build the latest code based on version 1.2 of Solr" />
        <echo message="Use 'ant -Dsolr.version=&quot;1.3&quot;' to build the latest code based on version 1.3 of Solr" />
        <echo message="For developers" />
        <echo message="Use 'ant clean' to clean the compiled source directory" />
        <echo message="Use 'ant doc' to generate JavaDoc documentation" />
        <echo message="Use 'ant gzip' to build a gzipped tarball and checksum for distribution (be sure to svn export first)" />
        <echo message="Use 'ant test' to run unit tests" />
    </target>


    <!-- Site Testing Targets -->

    <target name="testClean" description="clean generated test directories">
        <delete dir="${site.test.dir}/${build.dir}" />
    </target>

    <target name="testInit" depends="testClean" description="create (empty) generated test directories">
        <mkdir dir="${site.test.dir}/${build.dir}" />
    </target>

    <target name="testCompile" depends="testInit,compile" description="Compile test source code into test build dir">
        <path id="test.classpath.jars" description="Jars for classpath for building/running Test code">
            <fileset dir="${lib.dir}" includes="*.jar" />
            <fileset dir="${lib.dir}/solrmarc/dist" includes="*.jar" />
            <fileset dir="${site.lib.dir}" includes="*.jar" /> 
            <fileset file="${site.build.dir}/${custom.jar.name}.jar" />
            <fileset dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />   
        </path>

        <javac destdir="${site.test.dir}/${build.dir}" 
               srcdir="${site.test.dir}/${src.dir}:${lib.dir}/solrmarc/${test.dir}/${src.dir}" 
               target="${java.compat.version}" source="${java.compat.version}" 
               debug="on" encoding="utf-8">
            <include name="org/**/*.java" />
            <include name="edu/**/*.java" />
            <exclude name="solr/**/*.java" />
            <classpath>
                <path refid="test.classpath.jars" />
            </classpath>
        </javac>
    </target>

    <target name="testJar" depends="testCompile" description="jar up test class files">
        <echo message=" creating test jar :  ${site.test.dir}/${site.test.jar}" />
        <jar jarfile="${site.test.dir}/${site.test.jar}">
            <fileset dir="${site.test.dir}/${build.dir}" includes="**/*.class" />
        </jar>
    </target>

    <target name="testBibIx" depends="testJar" description="run junit tests for bib index">
        <echo message="using solr version: ${solr.version}" />

        <path id="test.run.classpath.jars" >
            <path refid="test.classpath.jars" />
            <fileset file="${site.test.dir}/${site.test.jar}" />
            <!-- Add classpath entries for properties files -->
            <fileset dir="." includes="log4j.properties" />
        </path>

        
        <junit showoutput="yes" printsummary="yes" fork="yes">
            <formatter type="plain" usefile="no" />

            <classpath>
                <path refid="test.run.classpath.jars" />
            </classpath>

            <sysproperty key="solrmarc.path" path="${lib.dir}/solrmarc" />
            <sysproperty key="solrmarc.site.path" path="${site.dir}" />
            <sysproperty key="solr.path" path="${site.dir}/solr" />
            <sysproperty key="solr.data.dir" path="${site.dir}/solr/data" />
            <!-- these crucial properties set here b/c normally they are in 
                   the properties file indicated with an argument in the command line -->
            <sysproperty key="solr.indexer" value="${solr.indexer}" />
            <sysproperty key="solr.indexer.properties" value="${solr.indexer.properties}" />

            <test name="${test.bibix.class}" />
        </junit>
    </target>
</project>
