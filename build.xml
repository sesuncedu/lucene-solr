<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="build" name="SolrMarc Custom">

    <!-- property files -->
    <property file="build_override.properties" />
    <property file="build.properties" />

    <property name="buildtools.path" value="buildtools" />
        
    <!-- import other ant scripts -->
    <property name="one-jar.dist.dir" value="${buildtools.path}" />
    <import file="${buildtools.path}/one-jar-ant-task.xml"/>
    <property name="ant_extras.dist.dir" value="${buildtools.path}" />
    <import file="${buildtools.path}/ant_extras.xml"/>
    
    <tstamp>
        <format property="year" pattern="yyyy" />
        <format property="DSTAMP" pattern="yyyy-MM-dd" />
        <format property="TSTAMP" pattern="HH:mm:ss" />
        <format property="dateversion" pattern="yyyy.MM.dd.HH.mm.ss" />
    </tstamp>
 
    <target name="clean" description="clean the generated directories">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${tag.dir}" />
        <delete dir="${tag.dir}" />
    </target>

    <target name="init" depends="init_site,solrversion" unless="init.already.run"
        description="create (empty) generated directories">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${dist.dir}" />
        <path id="classpath.jars" description="Jars for classpath for building custom code (but not solr jars)">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
                <exclude name="junit*.jar" />
            </fileset>
            <fileset dir="${lib.dir}/solrmarc/dist" includes="*.jar" />
            <fileset dir="${site.lib.dir}" includes="*.jar" />
        </path>
        <property name="init.already.run" value="true" />
    </target>

    <target name="dependencies" depends="solrversion"  description="Build the core SolrMarc code" >
        <ant dir="${lib.dir}/solrmarc" target="build" inheritAll="false"/>
    </target>
   
    <macrodef name="init_site_props">
        <sequential>
            <property name="site.src.dir" value="${site.dir}/${src.dir}" />
            <property name="site.lib.dir" value="${site.dir}/${lib.dir}" />
            <property name="site.build.dir" value="${site.dir}/${build.dir}" />
            <property name="site.test.dir" value="${site.dir}/${test.dir}" />
            <property name="site.test.src.dir" value="${site.test.dir}/${src.dir}" />
            <property name="site.test.solr.dir" value="${site.test.dir}/solr" />
            <property name="site.map.dir" value="${site.dir}/${trans.map.path}" />
            <property name="site.script.dir" value="${site.dir}/${script.template.dir}" />

            <property file="${site.dir}/build_override.properties" /> 
            <property file="${site.dir}/build.properties" />
        </sequential>
    </macrodef>

    <macrodef name="make_site_dirs">
        <sequential>
        	<mkdir dir="${site.src.dir}" />
            <mkdir dir="${site.build.dir}" />
            <mkdir dir="${site.lib.dir}" />
            <mkdir dir="${site.test.dir}" />
            <mkdir dir="${site.test.src.dir}" />
            <mkdir dir="${site.test.solr.dir}" />
            <mkdir dir="${site.map.dir}" /> 
            <mkdir dir="${site.script.dir}" /> 
        </sequential>
    </macrodef>

    <macrodef name="get_indexer_class" >
        <sequential>
            <fileset id="custom_indexer_source" dir="${site.dir}" includes="${src.dir}/**/*.java" >
                <containsregexp expression="public[ ]+class[ ]+[A-Za-z][A-Za-z0-9_]*[ ]+extends[ ]+SolrIndexer"/>
            </fileset>
    
            <condition property="custom.index.source.exists">
                <resourcecount count="0" when="gt" refid="custom_indexer_source" />
            </condition>
            
            <property name="custom.indexer.source" refid="custom_indexer_source" />
            
            <if>
                <resourcecount count="0" when="gt" refid="custom_indexer_source" />
                <then>
                    <pathconvert property="custom.indexer.class" refid="custom_indexer_source">
                        <chainedmapper>
                            <regexpmapper from="^.*src[/\\](.*java)$$" to="\1" />
                            <packagemapper from="*.java" to="*"/>
                        </chainedmapper>
                    </pathconvert>
                </then>
                <else>
                    <property name="custom.indexer.class" value="org.solrmarc.index.SolrIndexer" />
                </else>
            </if>
            
            <echo message="custom.indexer.source = ${custom.indexer.source}" />
            <echo message="custom.indexer.class = ${custom.indexer.class}" />
        </sequential>
    </macrodef>
    
    <macrodef name="get_properties_for_config_file" >
        <sequential>
            <input message="Enter URL of where solr server will be located:" addproperty="solr.hosturl"  
                defaultvalue="http://localhost:8983/solr" />
         <!--   <get src="${solr.hosturl}" dest="${dist.dir}/_hostResp.txt" ignoreerrors="true" /> --> 
            <input-filepath message="Enter full path of Solr home directory:${line.separator}(Note: directory should contain 'conf' directory containing solrconfig.xml and schema.xml) " 
                addproperty="solr.path" defaultvalue="" />        	

        	<echo message="solr path = ${solr.path} "/>
        	<condition property="solr.path.available" >
                <and>
                    <available file="${solr.path}/conf/solrconfig.xml" />
                    <available file="${solr.path}/conf/schema.xml" />
                </and>
            </condition>
            <fail message="Unable to find both solrconfig.xml and schema.xml in conf directory under specified solr home."  unless="solr.path.available" />
            
            <get_indexer_class/>
            
            <property name="solr.indexer" value="${custom.indexer.class}" />
            <property name="solr.indexer.properties"   value="${custom.config.file.prefix}_index.properties" /> 
            <input message="Enter encoding used in MARC records to be read in:${line.separator}MARC8 - Longstanding standard encoding scheme used by U.S. libraries${line.separator}UNIMARC - Encoding scheme used in many places in Europe${line.separator}UTF8 - Unicode character encoding scheme, used in some newer systems${line.separator}BESTGUESS - You have no idea what encoding your records are in, and want the program to try to determine it." 
                addproperty="marc.default_encoding"  validargs="MARC8,UNIMARC,UTF-8,BESTGUESS" defaultvalue="MARC8" />
        </sequential>
    </macrodef>
    
    <macrodef name="get_site_specific_settings" >
        <sequential>
            <input-save message="Enter name to use for Jar File containing custom indexing functions${line.separator}(Note: omit &quot;.jar&quot; from end of Jar Name) "
                addproperty="custom.jar.name" defaultvalue="Custom"  propertyfile="${site.dir}/build_override.properties" />
            <lowercase property="custom.jar.name.lc" value="${custom.jar.name}" />
            <echo message="lowercase = ${custom.jar.name.lc}" level="verbose" />
            
            <input-save message="Enter prefix of properties files for config and index for custom modifications ${line.separator}(ie. for  myprefix_config.properties  and   myprefix_index.properties  enter  myprefix)"       
                addproperty="custom.config.file.prefix" defaultvalue="${custom.jar.name.lc}"  propertyfile="${site.dir}/build_override.properties" />
            <input-save message="Enter name to use for final resulting Jar File containing all code, libraries, and properties${line.separator}(Note: omit &quot;.jar&quot; from end of Jar Name) "
                addproperty="distribution.jar.name" defaultvalue="${custom.jar.name}_SolrMarc"  propertyfile="${site.dir}/build_override.properties" />
            <input-save message="Enter java heap size memory argument to put in generated scripts for running site-specific SolrMarc Indexer "
                addproperty="exe.mem.args" defaultvalue="-Xmx256m" propertyfile="${site.dir}/build_override.properties" />

        </sequential>
    </macrodef>
    
    <target name="init_site" description="Create the src, lib, bin, test directories for a custom site" unless="init_site.already.run" >
        <input-save message="Enter name of directory to contain all site-specific modifications:"       
            addproperty="site.dir" propertyfile="build_override.properties" />
        <init_site_props /> 

        <echo message="site.test.solr.dir = ${site.test.solr.dir}" />
        <if>
            <and> 
                <available file="${site.dir}" /> 
                <resourcecount count="2" when="ge">
                    <fileset dir="${site.dir}" includes="*_config.properties,*_index.properties" />
                </resourcecount>  
            </and> 
            <then>
                <echo message="site_dir ${site.dir} already inited skipping forward. "/>
                <get_indexer_class />
            </then>
            <else>
                <mkdir dir="${site.dir}" />
                <pathconvert property="example.dir.list" pathsep="," >
                    <path >
                        <dirset dir="examples" includes="*" />
                    </path>
                    <flattenmapper />
                </pathconvert>
                <input message="Enter name of example configuration to start from:"  addproperty="example.configuration"
                        validargs="${example.dir.list},none" defaultvalue="none" />
                <if >
                    <equals arg1="${example.configuration}" arg2="none" />
                    <then>
                        <make_site_dirs />
                        <get_site_specific_settings />

                        <echo message="custom.jar.name = ${custom.jar.name}" />
                        <antcall target="create_config" />
                        <touch file="${site.dir}/${custom.config.file.prefix}_index.properties" />
                        <echo message="Directory created for site specific code in directory: ${site.dir}" />
                        <echo message="------------------------------------------------------------------------------------" />
                        <echo message="A configuration file (named ${custom.config.file.prefix}_config.properties)  and " />
                        <echo message="an empty index specification file (named ${custom.config.file.prefix}_index.properties  were  "/>
                        <echo message="created for you in that directory, as well as a number of directories, "/>
                        <echo message="most of which are currently empty. These directories are:"/>
                        <echo message="    ${src.dir} - where you should place the source code for any custom indexing functions needed by your index specification"/>
                        <echo message="    ${trans.map.path} - where you should place any translation map properties files needed by your index specification"/>
                        <echo message="    ${lib.dir} - where you should place any jar files needed by your custom indexing functions"/>
                        <echo message="    ${script.template.dir} - where you should place any shell scripts and/or batch files to be copied to the ${dist.dir} "/>
                        <echo message="Note: you must create the index specification file before you will be able to "/>
                        <echo message="      finish the build process or successfully index any MARC files." />                        
                    </then>
                    <else>
                        <copy todir="${site.dir}" >
                            <fileset dir="examples/${example.configuration}" includes="src/*.java,lib/**,translation_maps/*.properties,script_templates/*,test/**,build.properties" />
                        </copy>
                        <property file="${site.dir}/build.properties" />
                        <make_site_dirs />
                    	<get_site_specific_settings />
                        <get_properties_for_config_file />
                        <copy todir="${site.dir}" filtering="true">
                            <fileset dir="examples/${example.configuration}" includes="*_config.properties,*_index.properties" />
                            <regexpmapper from="^[^_]*(.*)" to="${custom.config.file.prefix}\1"/>
                        	<filterchain>
                        		<tokenfilter>
	                                <linetokenizer/>
	                                <replaceregex pattern="(solr.path *=).*" replace="\1 ${solr.path}"/>
	                                <replaceregex pattern="(solr.hosturl *=).*" replace="\1 ${solr.hosturl}/update"/>
	                                <replaceregex pattern="(solr.indexer *=).*" replace="\1 ${solr.indexer}"/>
	                                <replaceregex pattern="(solr.indexer.properties *=).*" replace="\1 ${solr.indexer.properties}"/>
	                                <replaceregex pattern="(marc.default_encoding *=).*" replace="\1 ${marc.default_encoding}"/>
	                            </tokenfilter>
                            </filterchain>
                        </copy>
                    </else>
                </if>
            </else>
        </if>
        <property name="init_site.already.run" value="true" />
     </target>
    
        
    <!-- Solr Version Properties Targets -->
    <target name="solrversion" description="Set the version of Solr to use" unless="solrversion.already.run">
        <input-save message="solr.version must be defined as either 1.2, 1.3, or 1.4 (or war)" 
            validargs="1.2,1.3,1.4,war" 
            addproperty="solr.version" defaultvalue="war"  propertyfile="${site.dir}/build_override.properties" />
        <if>
            <equals arg1="${solr.version}" arg2="war" />
            <then>
                <property name="solr.version.war" value="true" />
                <if>
                    <not> <isset property="${solr.war.location}" /> </not>
                    <then>
                        <input-filepath message="Enter full path of where solr.war file is located:" addproperty="solr.war.location" />
                        <condition property="war.exists">
                            <available file="${solr.war.location}" />
                        </condition>
                        <fail unless="war.exists">Solr.war file ${solr.war.location} does not exist</fail>
                        <propertyfile file="${site.dir}/build_override.properties">
                            <entry key="solr.war.location" value="${solr.war.location}" />
                        </propertyfile>
                    </then>
                </if>
                <delete dir="${lib.dir}/solr_war" />
                <mkdir dir="${lib.dir}/solr_war" />
                <unwar src="${solr.war.location}" dest="${lib.dir}/solr_war" overwrite="true">
                    <patternset>
                        <include name="**/lucene-*.jar" />
                        <include name="**/apache-solr-*.jar" />
                        <include name="**/slf4j*.jar" />
                    </patternset>
                    <mapper type="flatten" />
                </unwar>
            </then>
        </if>
        <property name="solrversion.already.run" value="true" />
    </target>

    <target name="check_config_exists" >
        <condition property="config.exists" >
            <available file="${site.dir}/${custom.config.file.prefix}_config.properties" /> 
        </condition>
        <condition property="index.exists" >
            <available file="${site.dir}/${custom.config.file.prefix}_index.properties" /> 
        </condition>
        
    </target>

    <target name="create_config" depends="check_config_exists" unless="config.exists" >
        <get_properties_for_config_file />
        <property name="marc.to_utf_8"   value="true" />
        <property name="marc.permissive"   value="true" />
        <property name="marc.include_errors" value="false" />
        <copy file="${buildtools.path}/template_config.properties" tofile="${site.dir}/${custom.config.file.prefix}_config.properties" >
            <filterset>
                <filter token="SOLR_PATH" value="${solr.path}" />
                <filter token="SOLR_INDEXER" value="${solr.indexer}" />
                <filter token="SOLR_INDEXER_PROPERTIES" value="${solr.indexer.properties}" />
                <filter token="SOLR_HOSTURL" value="${solr.hosturl}/update" />
                <filter token="MARC_TO_UTF_8" value="${marc.to_utf_8}" />
                <filter token="MARC_PERMISSIVE" value="${marc.permissive}" />
                <filter token="MARC_DEFAULT_ENCODING" value="${solr.hosturl}/update" />
                <filter token="MARC_TO_UTF_8" value="${marc.default_encoding}" />
                <filter token="MARC_INCLUDE_ERRORS" value="${marc.include_errors}" />
            </filterset>
        </copy>
    </target>
    
    <target name="compile" depends="init,dependencies" 
            description="Compile custom source code into the build directory"
            if="custom.index.source.exists">
         <javac destdir="${site.build.dir}" srcdir="${site.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8">
            <include name="**/*.java" />
            <classpath refid="classpath.jars" />
        </javac>

        <jar destfile="${site.build.dir}/${custom.jar.name}.jar">
            <fileset dir="${site.build.dir}" includes="**/*.class" />
        </jar>
    </target>

    <target name="defaultconfig" unless="default.config">
        <path id="config.file.set" >
    		<fileset dir="${site.dir}" includes="${custom.config.file.prefix}*_config.properties"  />
    	</path>
        <resourcecount property="config.file.cnt" refid="config.file.set" />
        <if >
            <equals arg1="${config.file.cnt}" arg2="0" />
            <then>
                <property name="default.config" value="" />
            </then>
            <else>
                <pathconvert property="config.file.list" pathsep="," >
                     <path refid="config.file.set" />
                     <flattenmapper />
                </pathconvert>
            	<if>
            		<equals arg1="${config.file.cnt}" arg2="1" />
		            <then>
		                <property name="default.config" value="${config.file.list}" />
		            </then>
		            <else>
		                <input-save message="Select the default config file to use if no such file is specified on the command line" 
		                    validargs="${config.file.list}" addproperty="default.config" propertyfile="${site.dir}/build_override.properties" />
		            </else>
            	</if>
            </else>
        </if>
    	<echo message="default.config = ${default.config} " />
    </target>
    
    <target name="scripts" depends="init" description="Copy scripts or batch files from script_templates directory to the dist directory" >
        <if>
            <os family="windows" />
            <then>
                <copy todir="${dist.dir}" overwrite="true">
                      <fileset dir="${script.template.dir}" includes="*.bat" />
                      <fileset dir="${site.script.dir}" includes="*.bat" />
                      <filterchain>
                          <fixcrlf />
                      </filterchain>
                      <filterset>
                          <filter token="CUSTOM_JAR_NAME" value="${distribution.jar.name}.jar" />
                          <filter token="DEFAULT_CONFIG_FILE" value="${default.config}" />
                          <filter token="MEM_ARGS" value="${exe.mem.args}" />
                      </filterset>
                 </copy>
            </then>
            <else>
                <copy todir="${dist.dir}" overwrite="true">
                     <fileset dir="${script.template.dir}" includes="*" excludes="*.bat"/>
                     <fileset dir="${site.script.dir}" includes="*" excludes="*.bat"/>
                     <filterchain>
                         <fixcrlf />
                     </filterchain>
                     <filterset>
                         <filter token="CUSTOM_JAR_NAME" value="${distribution.jar.name}.jar" />
                         <filter token="DEFAULT_CONFIG_FILE" value="${default.config}" />
                         <filter token="MEM_ARGS" value="${exe.mem.args}" />
                     </filterset>
                 </copy>
                
                <chmod perm="u+x" >
                     <fileset dir="${dist.dir}" excludes="*.jar,*.bat" />
                </chmod>
            </else>
        </if>
    </target>
    
    <target name="build" depends="compile,defaultconfig" 
            description="create ${jar.name} in the build directory">
        <copy tofile="${buildtools.path}/manifest.mf" 
              file="${buildtools.path}/manifest_template.mf" overwrite="true">
            <filterset>
                <filter token="NAMEOFMAINCLASS" value="org.solrmarc.marc.MarcImporter"/>
                <filter token="NAMEOFDEFAULTCONFIGFILE" value="${default.config}" />
            </filterset>
        </copy>
        
        <!-- Load in name of main jar file from solrmarc dist build.properties -->
        <loadproperties srcfile="${lib.dir}/solrmarc/build.properties">
            <filterchain>
                <linecontains>
                    <contains value="jar.name"/>
                </linecontains>
            </filterchain>
        </loadproperties>
        
        <one-jar destfile="${dist.dir}/${distribution.jar.name}.jar" 
               manifest="${buildtools.path}/manifest.mf">
            <main jar="${lib.dir}/solrmarc/${dist.dir}/${jar.name}" />
            <lib>
                <fileset dir="${lib.dir}" includes="*.jar" excludes="junit*.jar,jzkit_client.jar"/>
                <fileset dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />
                <fileset dir="${site.build.dir}" includes="*.jar" />
                <fileset dir="${site.lib.dir}" includes="*.jar" />
            </lib>
            <fileset dir="${lib.dir}/solrmarc/${trans.map.path}" includes="*.properties" />
            <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*.properties" excludes="build.properties"/>
            <fileset dir="." includes="log4j.properties" />
            <fileset dir="${site.map.dir}" includes="*.properties" />
        </one-jar>
            
        <antcall target="scripts" />
        
     </target>

    
    <target name="usage" description="Prints usage instructions">
        <echo message="Welcome to the Solrmarc indexing project" />
        <echo message="Use 'ant' to build the latest code" />
        <echo message="Use 'ant -Dsolr.version=&quot;1.2&quot;' to build the latest code based on version 1.2 of Solr" />
        <echo message="Use 'ant -Dsolr.version=&quot;1.3&quot;' to build the latest code based on version 1.3 of Solr" />
        <echo message="For developers" />
        <echo message="Use 'ant clean' to clean the compiled source directory" />
        <echo message="Use 'ant doc' to generate JavaDoc documentation" />
        <echo message="Use 'ant gzip' to build a gzipped tarball and checksum for distribution (be sure to svn export first)" />
        <echo message="Use 'ant test' to run unit tests" />
    </target>


    <!-- Site Testing Targets -->

    <target name="testClean" depends="init" description="clean generated test directories">
        <delete dir="${site.test.dir}/${build.dir}" />
    </target>

    <target name="testInit" depends="testClean" description="create (empty) generated test directories">
        <mkdir dir="${site.test.dir}/${build.dir}" />
        <property file="${site.test.dir}/test.properties" />
        <property name="site.test.jar" value="${custom.jar.name}Test.jar" />
        <mkdir dir="${site.test.solr.dir}" />
        <mkdir dir="${site.test.solr.dir}/conf" />
        <property name="test.solr.dir" value="${test.dir}/solr" />
        <property name="test.data.dir" value="${test.dir}/data" />
        <property name="test.data.file" value="u399.mrc" />

    	<if >
    		<not> <isset property="solr.path" />  </not>
    		<then>
    	        <loadproperties srcfile="${site.dir}/${default.config}">
    	            <filterchain>
    	                <linecontains>
    	                    <contains value="solr.path"/>
    	                </linecontains>
    	            </filterchain>
    	        </loadproperties>
    		</then>
    	</if>
    	<property name="site.test.solr.conf.override" value="${solr.path}/conf" />	
    	
        <copy overwrite="false" todir="${site.test.solr.dir}" >
            <fileset dir="${test.solr.dir}" includes="lib/*.jar,conf/*.*,conf/xslt/*,data" excludes="data/**" />
        </copy>
        <copy overwrite="true" todir="${site.test.solr.dir}/conf" failonerror="false">
            <fileset dir="${site.test.solr.conf.override}" includes="*.xml" />
        </copy>
        <property name="test.class" value="org.solrmarc.index.UtilUnitTests" />
    </target>

    <target name="testCompile" depends="testInit,compile" description="Compile test source code into test build dir">
        <path id="test.classpath.jars" description="Jars for classpath for building/running Test code">
            <fileset dir="${lib.dir}" includes="*.jar" />
            <fileset dir="${lib.dir}/solrmarc/dist" includes="*.jar" />
            <fileset dir="${site.lib.dir}" includes="*.jar" /> 
            <fileset file="${site.build.dir}/${custom.jar.name}.jar" />
            <fileset dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />   
        </path>

        <javac destdir="${site.test.dir}/${build.dir}" 
               srcdir="${site.test.dir}/${src.dir}:${test.dir}/${src.dir}" 
               target="${java.compat.version}" source="${java.compat.version}" 
               debug="on" encoding="utf-8">
            <include name="org/**/*.java" />
            <include name="edu/**/*.java" />
            <exclude name="solr/**/*.java" />
            <classpath>
                <path refid="test.classpath.jars" />
            </classpath>
        </javac>
    </target>

    <target name="testJar" depends="testCompile" description="jar up test class files">
        <echo message=" creating test jar :  ${site.test.dir}/${site.test.jar}" />
        <one-jar destfile="${site.test.dir}/${site.test.jar}" 
               manifest="${buildtools.path}/manifest.mf">
            <main jar="${buildtools.path}/ant_extras.jar" />
            <fileset dir="${lib.dir}/solrmarc/${trans.map.path}" includes="*.properties" />
            <fileset dir="${site.dir}" includes="${custom.config.file.prefix}*.properties" excludes="build.properties"/>
            <fileset dir="." includes="log4j.properties" />
            <fileset dir="${site.map.dir}" includes="*.properties" />
            <fileset dir="${site.test.dir}/${build.dir}" includes="**/*.class" />
        </one-jar>
    </target>

    <target name="test" depends="testJar" description="run junit tests for bib index">
        <echo message="using solr version: ${solr.version}" />

        <path id="test.run.classpath.jars" >
            <path refid="test.classpath.jars" />
            <fileset file="${site.test.dir}/${site.test.jar}" />
        </path>
      
        <java jar="${dist.dir}/${distribution.jar.name}.jar" fork="true" maxmemory="128m" failonerror="true">
            <arg line="${test.data.dir}/${test.data.file}" />
            <sysproperty key="solr.path" value="${site.test.solr.dir}" />
            <sysproperty key="solr.data.dir" value="${site.test.solr.dir}/data" />
            <redirector errorproperty="errorproperty">
              <errorfilterchain>
                  <linecontainsregexp>
                      <regexp pattern=" INFO:*"/>
                  </linecontainsregexp>
              </errorfilterchain>
            </redirector>
        </java>
        
        <echo message="${errorproperty}" />
        
        <junit showoutput="yes" printsummary="yes" fork="yes">
            <formatter type="plain" usefile="no" />

            <classpath>
                <path refid="test.run.classpath.jars" />
            </classpath>

            <sysproperty key="test.data.path" path="${test.data.dir}" />
            <sysproperty key="solr.path" path="${site.test.solr.dir}" />
            <sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />

            <test name="${test.class}" />
        </junit>
    </target>
</project>
