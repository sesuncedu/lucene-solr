<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="build" name="SolrMarc">

	<property name="one-jar.dist.dir" value="buildtools" />
	<import file="buildtools/one-jar-ant-task.xml"/>

	<property file="build_override.properties" />
	<property file="build.properties" />

	<tstamp>
		<format property="year" pattern="yyyy" />
		<format property="DSTAMP" pattern="yyyy-MM-dd" />
		<format property="TSTAMP" pattern="HH:mm:ss" />
		<format property="dateversion" pattern="yyyy.MM.dd.HH.mm.ss" />
	</tstamp>

	<!-- Macro to build a checksum file
                Only needed until the "format" option is supported
                by ant's checksum task -->
	<macrodef name="solrmarc-checksum">
		<attribute name="file" />

		<sequential>
			<checksum file="@{file}" property="@{file}.sum" algorithm="${checksum.algorithm}" />
			<basename file="@{file}" property="@{file}.base" />
			<concat destfile="@{file}.${checksum.algorithm}" force="yes" append="false" fixlastline="yes">
				<header trimleading="yes">${@{file}.sum} </header>
				<!-- empty fileset to trick concat -->
				<fileset dir="." excludes="**" />
				<footer trimleading="yest">${@file}.base}</footer>
			</concat>
		</sequential>
	</macrodef>

	<path id="classpath" description="Set's the classpath to use the lib folder">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>
	
    <target name="checksolrjars" >
        <condition property="solr.external.uptodate" >
        	<and>
        		<available filepath="${dist.dir}" file="solr_${solr.version}_lib.jar" type="file"/>
        		<uptodate targetfile="${dist.dir}/solr_${solr.version}_lib.jar">
        		    <srcfiles dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />
        		</uptodate>
        	</and>
        </condition>
    </target>

	<target name="solrjars" depends="solrversion,checksolrjars,solrversioncheck" 
		    if="solr.external.check" unless="solr.external.uptodate">
	    <mkdir dir="${build.dir}/solrjar" />
		<unjar dest="${build.dir}/solrjar" overwrite="true">
			<fileset dir="${lib.dir}/solr_${solr.version}">
			  	<include name="*.jar" />
			</fileset>
		</unjar>
		<jar destfile="${dist.dir}/solr_${solr.version}_lib.jar">
			<fileset dir="${build.dir}/solrjar">
				<exclude name="**/*.mf" />
			</fileset>
		</jar>
        <delete dir="${build.dir}/solrjar" />
	</target>
	    	
    <target name="solrversion" unless="${solr.version}">
        <input message="solr.version must be defined as either 1.2, 1.3, or 1.4 (or war)" 
                       validargs="1.2,1.3,1.4,war" 
                       addproperty="solr.version" defaultvalue="1.2" />
        <propertyfile file="build_override.properties">
            <entry key="solr.version" value="${solr.version}" />
        </propertyfile>
    </target>

    <target name="solrexternal" unless="${solr.external}">
        <input message="Exclude solr libraries from solrmarc jar file (true or false)" 
                        validargs="true,false" 
                        addproperty="solr.external" defaultvalue="true" />
        <propertyfile file="build_override.properties">
            <entry key="solr.external" value="${solr.external}" />
        </propertyfile>
    </target>

    <target name="solrversioncheck">
        <condition property="solr.version.war">
            <equals arg1="${solr.version}" arg2="war" />
        </condition>
        <condition property="solr.lib.dir" value="solr_${solr.version}" else="solr_none">
            <equals arg1="${solr.external}" arg2="false" />  
        </condition>
        <condition property="solr.external.check" >
            <equals arg1="${solr.external}" arg2="true" />  
        </condition>
    </target>

	<target name="solrwarlocation" depends="solrversioncheck" if="solr.version.war" unless="solr.war.location">
		<input message="Enter full path of where solr.war file is located:" 
                        addproperty="solr.war.location"  />
		<condition property="war.exists">
			<available file="${solr.war.location}"/>
		</condition>
		<fail unless="war.exists">Solr.war file ${solr.war.location} does not exist</fail>
	    <propertyfile file="build_override.properties">
	    	<entry key="solr.war.location" value="${solr.war.location}" />
	    </propertyfile>

	</target>

	<target name="solrlibextract" depends="solrwarlocation" if="solr.version.war">
		<mkdir dir="${lib.dir}/solr_war" />
		<unwar src="${solr.war.location}" dest="${lib.dir}/solr_war" overwrite="true">
			<patternset>
				<include name="**/lucene-*.jar" />
			    <include name="**/apache-solr-*.jar" />
				<include name="**/slf4j*.jar" />
			</patternset>
            <mapper type="flatten"/>
		</unwar>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${doc.dir}" />
		<delete dir="${tag.dir}" />
	</target>

	<target name="build" depends="init,solrversion,solrexternal,solrlibextract,solrjars" >
		<echo message="${ant.project.name}: ${ant.file}" />
		<echo message="using solr version: ${solr.version}" />
    	        <!-- list files in the lib directory -->
    	        <path id="library.project">
    	            <fileset dir="${lib.dir}" includes="*.jar" />
    	            <fileset dir="${lib.dir}/${solr.lib.dir}" includes="*.jar" />
    	        </path>

    	        <!-- use a chained mapper to seperate the file names -->
    	        <pathconvert property="lib.project.manifest.classpath" pathsep=" ">
    	            <path refid="library.project" />
    	            <chainedmapper>
    	                <flattenmapper />
    	                <globmapper from="*" to="lib/*" />
    	            </chainedmapper>
    	        </pathconvert>

		<javac destdir="${build.dir}" debug="source" target="${java.compat.version}" source="${java.compat.version}" encoding="utf-8">
			<src path="${src.dir}" />
			<classpath refid="classpath" />
		</javac>


		<!-- 
        <delete dir="${.dir}/lib" />
		<copy todir="${build.dir}/lib">
			<fileset dir="${lib.dir}" includes="*.jar" />
			<fileset dir="${lib.dir}/solr_${solr.version}" includes="*.jar" />
		</copy>
		-->
		
		<jar destfile="${build.dir}/MarcImporter.jar">
			<fileset dir="bin" includes="**/*.class" />
			<manifest>
				<attribute name="Main-Class" value="org.solrmarc.marc.MarcImporter" />
			</manifest>
		</jar>

		<jar destfile="${dist.dir}/zclient.jar">
			<fileset dir="bin" includes="**/ZClient.class,**/MarcTranslatedReader.class" />
		</jar>

	</target>

	<target name="compile" depends="init" description="Compile source code">
		<javac destdir="${build.dir}" target="${java.compat.version}" source="${java.compat.version}" debug="on" encoding="utf-8">
			<classpath refid="classpath" />
			<src path="${src.dir}" />
		</javac>
	</target>

	<!--
	<target name="jar" depends="compile">
		<path id="library.project">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>

		<pathconvert property="lib.project.manifest.classpath" pathsep=" ">

			<path refid="library.project" />
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="lib/*" />
			</chainedmapper>
		</pathconvert>

		<jar jarfile="${ant.project.name}.jar">
			<manifest>
				<attribute name="Main-Class" value="org.vufind.marc.MarcImporter" />

				<attribute name="Class-Path" value="${lib.project.manifest.classpath}" />
			</manifest>

		</jar>

	</target> -->

	<target name="exe" depends="build">
		<copy tofile="buildtools/manifest.mf" file="buildtools/manifest_template.mf" overwrite="true">
			<filterset>
				<filter token="NAMEOFMAINCLASS" value="org.solrmarc.marc.MarcImporter"/>
			</filterset>
		</copy>

		<one-jar destfile="${dist.dir}/SolrMarc.jar" manifest="buildtools/manifest.mf">
			<main jar="${build.dir}/MarcImporter.jar" >
			</main>
			<lib>
				<fileset dir="${lib.dir}" includes="*.jar" />
				<fileset dir="${lib.dir}/${solr.lib.dir}" includes="*.jar" />
			</lib>
			<fileset dir="translation_maps" includes="*.properties">
			</fileset>
		</one-jar>
	</target>

	<target name="Z3950Client">
		<java classname="MarcImporter" failonerror="true" fork="yes">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="usage" description="Prints usage instructions">
		<echo message="Welcome to the Solrmarc indexing project" />
		<echo message="Use 'ant' to build the latest code" />
		<echo message="Use 'ant -Dsolr.version=&quot;1.2&quot;' to build the latest code based on version 1.2 of Solr" />
		<echo message="Use 'ant -Dsolr.version=&quot;1.3&quot;' to build the latest code based on version 1.3 of Solr" />
		<echo message="For developers" />
		<echo message="Use 'ant clean' to clean the compiled source directory" />
		<echo message="Use 'ant doc' to generate JavaDoc documentation" />
		<echo message="Use 'ant gzip' to build a gzipped tarball and checksum for distribution (be sure to svn export first)" />
		<echo message="Use 'ant test' to run unit tests" />
	</target>

	<target name="gzip" description="Create a gzipped tarball and checksum file (in the tag directory)" depends="build">
		<echo message="Make sure to export the project (svn export) before running this task" />

		<mkdir dir="${tag.dir}" />

		<tar destfile="${tag.dir}/${ant.project.name}.tar.gz" compression="gzip" basedir="." excludes="bin/**,src/**,**/build.xml,**/**.mrc,**/.svn" />

		<solrmarc-checksum file="${tag.dir}/${ant.project.name}.tar.gz" />
	</target>

	<target name="doc" description="Generate JavaDoc documenation">
		<mkdir dir="${doc.dir}" />

		<javadoc destdir="${doc.dir}" author="true" version="true" overview="overview.html" use="true" windowtitle="SolrMarc" doctitle="Solrmarc Java Documentation" bottom="">
			<packageset dir="${src.dir}" defaultexcludes="yes">
				<exclude name="org/solrmarc/tests" />
			</packageset>

			<link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="." />
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
			<link href="http://junit.sourceforge.net/javadoc/" />
			<link href="http://lucene.apache.org/java/docs/api/" />
			<link href="http://lucene.apache.org/solr/api/" />

		</javadoc>
	</target>

	<chmod dir="." perm="u+x" includes="*.sh" />
</project>
